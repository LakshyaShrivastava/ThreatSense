version: '3.8'


services:

  zookeeper:

    image: confluentinc/cp-zookeeper:7.5.3

    hostname: zookeeper

    ports:

      - "2181:2181"

    environment:

      ZOOKEEPER_CLIENT_PORT: 2181

      ZOOKEEPER_TICK_TIME: 2000


  broker:

    image: confluentinc/cp-kafka:7.5.3

    hostname: broker

    ports:

      - "9092:9092"

      - "9093:9093"

    depends_on:

      - zookeeper

    environment:

      KAFKA_BROKER_ID: 1

      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT

      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  mongodb:
    image: mongo:6.0
    hostname: mongodb
    ports:
      - "27017:27017"
    command: > # Simplified command, no auth or keyfile
      bash -c "
        exec /usr/local/bin/docker-entrypoint.sh mongod --replSet rs0 --bind_ip 0.0.0.0 --noauth
      "
    environment: # Keep these for the entrypoint to run init scripts correctly
      # MONGO_INITDB_ROOT_USERNAME: mongoadmin_root # These will still trigger init scripts
      # MONGO_INITDB_ROOT_PASSWORD: rootpassword   # but auth won't be enforced by mongod
      REPLICA_SET_NAME: rs0
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      # Remove - mongo_keyfile:/opt/mongo
    restart: unless-stopped


  postgresdb:

    image: postgres:16

    hostname: postgresdb

    ports:

      - "5432:5432"

    environment:

      POSTGRES_DB: logs_db

      POSTGRES_USER: loguser

      POSTGRES_PASSWORD: logpassword

    volumes:

      - postgres_data:/var/lib/postgresql/data

    restart: unless-stopped


  connect:

    image: confluentinc/cp-kafka-connect:7.5.3

    hostname: connect

    ports:

      - "8083:8083"

    depends_on:

      - broker

      - mongodb

      - postgresdb

    environment:

      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'

      CONNECT_REST_PORT: 8083

      CONNECT_GROUP_ID: 'connect-cluster'

      CONNECT_CONFIG_STORAGE_TOPIC: 'connect-configs'

      CONNECT_OFFSET_STORAGE_TOPIC: 'connect-offsets'

      CONNECT_STATUS_STORAGE_TOPIC: 'connect-status'

      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'

      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'

      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'

      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'

      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'

      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'

      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'

      CONNECT_OFFSET_FLUSH_INTERVAL_MS: '10000'

      CONNECT_PLUGIN_PATH: '/usr/share/confluent-hub-components'

      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'

      CONNECT_AUTO_CREATE_TOPICS_ENABLE: 'true'

      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'

      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'

      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'

    command:

      - bash

      - -c

      - |

        echo "Waiting for Kafka broker to be ready (10 seconds delay)..."

        sleep 10

        echo "Installing MongoDB Kafka Connector..."

        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.16.0 || {

          echo "Failed to install MongoDB Kafka Connector. Exiting."; exit 1;

        }

        echo "Starting Kafka Connect worker..."

        /etc/confluent/docker/run

    volumes:

      - connect_data:/data


volumes:

  mongodb_data:

  connect_data:

  postgres_data:

  # mongo_keyfile: 
